generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  comments      Comment[]
  movieGroups   MovieGroup[]
  actorGroups   ActorGroup[]
  }

model VerificationRequest {
  id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Review {
  id                     String       @id @default(dbgenerated()) @map("_id") @db.ObjectId
  ownerId                String       @db.ObjectId
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  ratings                Int
  likes                  Int
  dislikes               Int
  title                  String
  text                   String
  movieId                String
  owner                  User         @relation(fields: [ownerId], references:[id])
}

model Comment {
  id          String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  text        String
  movieId     String
  likes       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  reported    Boolean    @default(false)
}

model MovieGroup {
  id        String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
  emoji     String
  name      String
  movieIds  String[]
  ownerId   String      @db.ObjectId
  user      User        @relation(fields: [ownerId], references: [id])
}

model ActorGroup {
  id        String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
  emoji     String
  name      String
  actorIds  String[]
  ownerId   String      @db.ObjectId
  user      User        @relation(fields: [ownerId], references: [id])
}
